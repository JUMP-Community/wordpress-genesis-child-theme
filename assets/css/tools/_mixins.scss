//
// Custom mixins.
//

//
// Media Query mixin
//
// @param {String | Boolean} $from (false) - One of $mq-breakpoints
// @param {String | Boolean} $until (false) - One of $mq-breakpoints
// @param {String | Boolean} $and (false) - Additional media query parameters
// @param {String} $media-type ($mq-media-type) - Media type: screen, printâ€¦
// @param {String} $breakpoints ($mq-breakpoints) - Breakpoints map
//
@mixin mq(
	$from: false,
	$until: false,
	$and: false,
	$media-type: $mq-media-type,
	$breakpoints: $mq-breakpoints
) {
	$min-width: 0;
	$max-width: 0;
	$media-query: "";

	// From: this breakpoint (inclusive)
	@if $from {

		@if type-of($from) == number {
			$min-width: $from;
		}

		@else {
			$min-width: mq-get-breakpoint-width($from, $breakpoints);
		}
	}

	// Until: that breakpoint (exclusive)
	@if $until {

		@if type-of($until) == number {
			$max-width: $until;
		}

		@else {
			$max-width: mq-get-breakpoint-width($until, $breakpoints);
		}
	}

	@if $min-width != 0 {
		$media-query: "#{$media-query} and (min-width: #{$min-width})";
	}

	@if $max-width != 0 {
		$media-query: "#{$media-query} and (max-width: #{$max-width})";
	}

	@if $and {
		$media-query: "#{$media-query} and #{$and}";
	}

	// Remove unnecessary media query prefix 'all and '
	@if $media-type == "all" and $media-query != "" {
		$media-type: "";
		$media-query: $media-query), 6;
	}

	@media #{$media-type + $media-query} {

		@content;
	}
}

//
// Hover focus mixin
//
// @group  Tools

// @link   https://github.com/seothemes/genesis-starter-theme
//

@mixin hover-focus {

	&:hover,
	&:focus,
	&:active {

		@content;
	}
}

//
// Border mixin
//
// @group  Tools

// @link   https://github.com/seothemes/genesis-starter-theme
//

@mixin border( $values ) {

	@include _directional-property(border, null, $values);
}

//
// Overlay mixin
//
// @group  Tools

// @link   https://github.com/seothemes/genesis-starter-theme
//

@mixin overlay {
	overflow: hidden;
	position: relative;

	&::before {
		background-color: $color--overlay;
		content: "";
		display: block;

		// @include position(absolute, 0 0 0 0);
	}
}

//
// Transition mixin
//
// @group  Tools

// @link   https://github.com/seothemes/genesis-starter-theme
//

@mixin transition {
	transition: all $base--transition-duration $base--transition-timing-function;
}

//
// Heading mixin
//
// @group  Tools

// @link   https://github.com/seothemes/genesis-starter-theme
//

@mixin heading {
	font-family: $font-family--heading;
	font-weight: $font-weight--heading;
	line-height: $line-height--heading;
	margin: 0 0 0.5em;
}

//
// Well mixin
//
// @group  Tools

// @link   https://github.com/seothemes/genesis-starter-theme
//

@mixin box {
	background-color: $color--background;
	border: $base--border;
	border-radius: $base--border--radius;
	padding: $gap;

	p {

		&:last-of-type {
			margin-bottom: 0;
		}
	}
}

//
// Notice mixin
//
// @group  Tools

// @link   https://github.com/seothemes/genesis-starter-theme
//

@mixin notice($color: "medium") {
	margin-bottom: $spacing--m;

	@include box;

	@if $color != "medium" {
		border-color: map_get($colors, $color);
		color: map_get($colors, $color);
		background-color: rgba(map_get($colors, $color), 0.1);
	}
}

//
// Icon mixin
//
// @group  Tools

// @link   https://github.com/seothemes/genesis-starter-theme
//

@mixin icon($glyph: "\f005", $font_weight: 400) {
	content: $glyph;
	font-family: "Font Awesome 5 Free", sans-serif;
	font-weight: $font_weight;
}

//
// Button mixin
//
// Used for both front end and block editor styling.
//
// @group  Tools

// @link   https://github.com/seothemes/genesis-starter-theme
//

@mixin button {
	background-color: $color--primary;
	border: 0;
	border-radius: $base--border--radius;
	color: $color--white;
	cursor: pointer;
	display: inline-block;
	font-size: $base--font-size / 1rem;
	font-weight: $font-weight--heading;
	line-height: 1;
	padding: $spacing--m $gutter;
	text-align: center;
	text-decoration: none;
	white-space: normal;
	width: auto;

	@include transition;

	@include hover-focus {
		background-color: lighten($color--primary, 10);
		color: $color--white;
		outline: none;
		text-decoration: none;
	}

	&:disabled {

		&,
		&:hover,
		&:focus {
			background-color: $color--muted;
			cursor: not-allowed;
			opacity: 0.5;
		}
	}

	&.small {
		font-size: small;
		padding: 1em 1.5em;
	}

	&.rounded {
		border-radius: 10rem;
	}

	&.outline {
		background: transparent;
		border: 1px solid $color--primary;
		color: $color--primary;

		@include hover-focus {
			background: $color--primary;
			color: $color--white;
		}
	}

	&.fa,
	&.fab,
	&.fas {
		display: inline-flex;
		font-family: $base--font-family;
		font-weight: $font-weight--heading;

		&::before {
			display: inline-block;
			font-family: "Font Awesome 5 Pro", sans-serif;
			font-style: normal;
			font-variant: normal;
			line-height: 1;
			margin-right: $spacing--s;
			text-rendering: auto;
		}
	}

	&.icon-right {

		&::before {
			margin-left: $spacing--s;
			margin-right: 0;
			order: 1;
		}
	}
}

@mixin _directional-property(
	$property,
	$suffix,
	$values
) {
	$top: $property + "-top" + if($suffix, "-#{$suffix}", "");
	$bottom: $property + "-bottom" + if($suffix, "-#{$suffix}", "");
	$left: $property + "-left" + if($suffix, "-#{$suffix}", "");
	$right: $property + "-right" + if($suffix, "-#{$suffix}", "");
	$all: $property + if($suffix, "-#{$suffix}", "");
	$values: _compact-shorthand($values);

	@if _contains-falsy($values) {
		// @if nth($values, 1) { #{$top}: nth($values, 1); }

		@if length($values) == 1 {

			@if nth($values, 1) {
				#{$right}: nth($values, 1);
			}
		}

		@else {

			@if nth($values, 2) {
				#{$right}: nth($values, 2);
			}
		}

		@if length($values) == 2 {
			//   @if nth($values, 1) { #{$bottom}: nth($values, 1); }
			@if nth($values, 2) {
				#{$left}: nth($values, 2);
			}
		}

		@else if length($values) == 3 {

			@if nth($values, 3) {
				#{$bottom}: nth($values, 3);
			}

			@if nth($values, 2) {
				#{$left}: nth($values, 2);
			}
		}

		@else if length($values) == 4 {

			@if nth($values, 3) {
				#{$bottom}: nth($values, 3);
			}

			@if nth($values, 4) {
				#{$left}: nth($values, 4);
			}
		}
	}

	@else {
		#{$all}: $values;
	}
}

@mixin margin($values) {

	@include _directional-property(margin, null, $values);
}

@mixin padding($values) {

	@include _directional-property(padding, null, $values);
}

@mixin hide-visually($toggle: "hide") {

	@if not index("hide" "unhide", $toggle) {

		@error "`#{$toggle}` is not a valid value for the `$toggle` argument in " +
			"the `hide-visually` mixin. Must be either `hide` or `unhide`.";
	}

	@else if $toggle == "hide" {
		border: 0;
		clip: rect(1px, 1px, 1px, 1px);
		clip-path: inset(100%);
		height: 1px;
		overflow: hidden;
		padding: 0;
		position: absolute;
		white-space: nowrap;
		width: 1px;
	}

	@else if $toggle == "unhide" {
		clip: auto;
		clip-path: none;
		height: auto;
		overflow: visible;
		position: static;
		white-space: inherit;
		width: auto;
	}
}

@mixin size(
	$width,
	$height: $width
) {

	@if _is-size($height) {
		height: $height;
	}

	@else {

		@error "`#{$height}` is not a valid length for the `$height` argument " +
			"in the `size` mixin.";
	}

	@if _is-size($width) {
		width: $width;
	}

	@else {

		@error "`#{$width}` is not a valid length for the `$width` argument " +
			"in the `size` mixin.";
	}
}

@mixin position(
	$position,
	$box-edge-values
) {
	$box-edge-values: _unpack-shorthand($box-edge-values);
	$offsets: (
		"top": nth($box-edge-values, 1),
		"right": nth($box-edge-values, 2),
		"bottom": nth($box-edge-values, 3),
		"left": nth($box-edge-values, 4),
	);

	position: $position;

	@each $offset, $value in $offsets {

		@if _is-length($value) {
			#{$offset}: $value;
		}
	}
}

@mixin clearfix {

	&::after {
		clear: both;
		content: "";
		display: block;
	}
}
